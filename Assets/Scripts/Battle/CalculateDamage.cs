using System; using System.Collections; using System.Collections.Generic; using UnityEngine; using System.Linq; public class CalculateDamage :MonoBehaviour {     public static event Action OnHeroesChoised;        int abilityPower;     float totalAbilityDamage;     float usedAbilityDamage;     int normalDamage;     int skillDamage;     bool isCoroutineExecuting;       public void CalcDamage()     {                   //如果是玩家回合         if(CombatStateMachine.isHeroesTurn){              Debug.Log("计算伤害开始");             //获取每一个英雄          //   CombatStateMachine.roundRecords.Clear();             foreach (var record in CombatStateMachine.roundRecords)             {                                  BoradProperty finalTotalProperty = new BoradProperty();                 //获取英雄所有装备的属性 +                 finalTotalProperty = LoadEquipment(Inventory.equipmentItem[record.I.id]);                 finalTotalProperty += record.I.LevelPropertyBoard;                 BaseAbility useAbility = record.I.UsedAbilityThisRound;                  //获取自身属性 +                 finalTotalProperty += record.I.FinalPropertyBoard;                 if (useAbility.type == AbilityType.Attack|| useAbility.type == AbilityType.Spell) //如果是普通攻击的话                 {                     addTarget(record,useAbility.targetExtra);                      FormualAttack(finalTotalProperty, record);                   }              }             if (OnHeroesChoised != null)             {                 OnHeroesChoised();             }             Debug.Log("计算伤害完毕");             CombatStateMachine.state = BattleStateType.HeroesEffect;          }else           {
            //如果是怪物回合
            CombatStateMachine.roundRecords = new List<RoundRecord>();              CombatStateMachine.whoIsNext = 0;  //(2)             foreach (var item in GM.baseMonstersInfo)             {                 var heroId = new List<int>();                 heroId.Add(0); //先模拟选择第一个角色作为 打击对象..                 AttackAbility attackAbility = item.MonsterAbilities.Where(prop => prop.type == AbilityType.Attack).First() as AttackAbility;                 RoundRecord roundRecord = new RoundRecord(item, heroId, attackAbility);                 CombatStateMachine.roundRecords.Add(roundRecord);             }              foreach (var record in CombatStateMachine.roundRecords)             {                  BoradProperty finalTotalProperty = new BoradProperty();                  BaseAbility useAbility = record.I.UsedAbilityThisRound;                                      //获取自身属性 +                 finalTotalProperty += record.I.FinalPropertyBoard;                 if (useAbility.type == AbilityType.Attack) //如果是普通攻击的话                 {                     addTarget(record, useAbility.targetExtra);                      FormualAttack(finalTotalProperty, record);                   }              }             CombatStateMachine.state = BattleStateType.MonsterEffect;          }       }      //添加选中的对象ID     private void addTarget(RoundRecord record, int count){             int lastId = record.You.Last(); //monster Index..         // 存活数量         int AliveCount;         List<BaseThing> aliveThingList = new List<BaseThing>();         if(CombatStateMachine.isHeroesTurn){               AliveCount = GM.baseMonstersInfo.Count(m => m.isAlive); // alive count             if (AliveCount == 0){                 record.canAnimation = false;                 return;             }              var amst= GM.baseMonstersInfo.Where(prop => prop.isAlive).OrderBy(prop => prop.id).ToList();             amst.ForEach((item) => { aliveThingList.Add(item); } );         }else{             AliveCount = GM.Heroes.Count(m => m.isAlive); // alive count             if (AliveCount == 0) {                 record.canAnimation = false;                 return;             }             var amst = GM.Heroes.Where(prop => prop.isAlive).OrderBy(prop => prop.id).ToList();             amst.ForEach((item) => { aliveThingList.Add(item); } );         }                            if(count+record.You.Count >=AliveCount){             record.You.Clear();             aliveThingList.ForEach((m) => { record.You.Add(m.id); } );             return;         }           int supplement = 0;         for (int i = record.You.Count - 1; i >= 0; i--)         {             if (!aliveThingList.Exists(p => p.id == record.You[i])){                 record.You.Remove(record.You[i]);                 supplement++;             }                           }          // all die before         if (record.You.Count == 0){             supplement += count;                       aliveThingList.Take(supplement).ToList().ForEach((m) =>             {                 record.You.Add(m.id);             } );              return;          }           for (int i = 0; i < count+supplement; i++)         {                        var find = aliveThingList.Find(prop => prop.id == lastId + i + 1);             if(find!=null ){                 record.You.Add(find.id);                 continue;             }             if(find==null && lastId== AliveCount-1){                 find = aliveThingList.Find(prop => prop.id == lastId + i + 1 - AliveCount);                 if(find!=null){                     record.You.Add(find.id);                 }                 continue;             }               for (int a = 0; a < aliveThingList.Count; a++)             {                 var aliveId = aliveThingList[a].id;                 bool isContain = record.You.Contains(aliveId);                 if(!isContain){                     record.You.Add(aliveId);                     break;                 }             }                    }       }     //加载装备     public static BoradProperty LoadEquipment(PlayerEquiped equiped){         BoradProperty equipment = new BoradProperty();          if(equiped.Weapon!=null){             equipment += equiped.Weapon.boradProperty;         }          if (equiped.head != null)         {             equipment += equiped.head.boradProperty;         }         if (equiped.cloth != null)         {             equipment += equiped.cloth.boradProperty;         }         if (equiped.horse != null)         {             equipment += equiped.horse.boradProperty;         }         if (equiped.accessories != null)         {             equipment += equiped.accessories.boradProperty;         }         if (equiped.MagicGoods != null)         {             equipment += equiped.MagicGoods.boradProperty;         }                         return equipment;     }             int FormualAttack(float attack, float defend)     {         return ((int)(attack * (100 / (100 + defend))));     }       void FormualAttack(BoradProperty a,RoundRecord record)     {         a.CalcBoardProperty();               if (CombatStateMachine.isHeroesTurn)         {             record.canAnimation = GM.baseMonstersInfo.Any(prop => prop.isAlive);         }         else         {             record.canAnimation = GM.baseMonstersInfo.Any(prop => prop.isAlive);         }         //record.canAnimation = GM.baseMonstersInfo.Any(prop => prop.isAlive);         record.damageInfos = new List<DamageInfoForAnimation>();                BaseThing b;         foreach (var id in record.You)         {             var dia = new DamageInfoForAnimation();                          if (CombatStateMachine.isHeroesTurn)             {                 b= GM.baseMonstersInfo.Where(monster => monster.id == id).FirstOrDefault();             }else             {                 b= GM.Heroes.Where(monster => monster.id == id).FirstOrDefault();             }              //这里是计算伤害值的地方              if(b!=null){                                 dia.normalDamage = (int)((a.FinalDamage *record.I.UsedAbilityThisRound.powerRate) * (100 / (100 + b.FinalPropertyBoard.DefendValue)));                  dia.trueDamage = 0;                 dia.hitTimes = record.I.UsedAbilityThisRound.hitTimes;                   //算受到的常规伤害                 dia.totalDamage  = ((dia.normalDamage + dia.trueDamage) * dia.hitTimes);                  if (b.hp - dia.totalDamage <= 0)                 {                     b.isAlive = false;                     dia.isAlive = false;                                     }                   record.damageInfos.Add(dia);                             }               record.manaCast = record.I.UsedAbilityThisRound.cost;                        }           if (CombatStateMachine.isHeroesTurn)         {             record.EnmeyAllDeath = GM.baseMonstersInfo.All(prop => prop.isAlive == false);         }         else         {             record.HeroesAllDeath = GM.Heroes.All(prop => prop.isAlive == false);         }            }           }  